/*
 * Copyright (C) 2017 Dgraph Labs, Inc. and Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Use protos/gen.sh to generate .pb.go files.
syntax = "proto3";

package protos;

message ManifestChangeSet {
  // A set of changes that are applied atomically.
  repeated ManifestChange changes = 1;
  HeadInfo head = 2;
}

message HeadInfo {
  uint64 version   = 1;
  uint32 logID     = 2;
  uint32 logOffset = 3;
}

message ManifestChange {
  uint64 ID = 1;            // Table ID.
  enum Operation {
    CREATE = 0;
    DELETE = 1;
    MOVE_DOWN = 2;
  }
  Operation op = 2;
  uint32 level = 3;       // Only used for CREATE.
}

message ShardChangeSet {
  uint64 shardID = 1;
  uint64 shardVer = 2;
  uint64 version = 3;
  ShardCompaction compaction = 4;
  ShardFlush flush = 5;
  ShardSnapshot snapshot = 6;
  SplitState state = 7;
  ShardPreSplit preSplit = 8;
  ShardSplitFiles splitFiles = 9;
  ShardSplit split = 10;
  bool shardDelete = 11;
}

enum SplitState {
  INITIAL = 0;
  PRE_SPLIT = 1;
  PRE_SPLIT_FLUSH_DONE = 2;
  SPLIT_FILE_DONE = 3;
}

message ShardCompaction {
  int32 cf = 1;
  uint32 level = 2;
  repeated TableCreate tableCreates = 3;
  repeated uint64 topDeletes = 4;
  repeated uint64 bottomDeletes = 5;
}

message ShardFlush {
  repeated L0Create l0Creates = 1;
  uint64 commitTS = 2;
}

message ShardSnapshot {
  bytes start = 1;
  bytes end = 2;
  ShardProperties properties = 3;
  repeated bytes splitKeys = 4;
  repeated L0Create l0Creates = 5;
  repeated TableCreate tableCreates = 6;
  uint64 commitTS = 7;
}

message ShardSplitFiles {
  repeated L0Create l0Creates = 1;
  repeated TableCreate tableCreates = 2;
  repeated uint64 tableDeletes = 3;
}

message L0Create {
  uint64 ID = 1;
  bytes start = 2;
  bytes end = 3;
  ShardProperties properties = 4;
}

message TableCreate {
  uint64 ID = 1;
  uint32 level = 2;
  int32 CF = 3;
  bytes smallest = 4;
  bytes biggest = 5;
}

message ShardPreSplit {
  repeated bytes Keys = 1;
  // the properties that is in mem-table, not persistent.
  // If it is nil, then the pre split is stable.
  ShardProperties memProps = 2;
}

message ShardSplit {
  repeated ShardProperties newShards = 1;
  repeated bytes Keys = 3;
  ShardProperties memProps = 4;
}

message ShardProperties {
  uint64 shardID = 1;
  repeated string keys = 2;
  repeated bytes values = 3;
}
