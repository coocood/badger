// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: meta_change.proto

package protos

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MetaChangeEvent struct {
	StartKey             []byte        `protobuf:"bytes,1,opt,name=startKey,proto3" json:"startKey,omitempty"`
	EndKey               []byte        `protobuf:"bytes,2,opt,name=endKey,proto3" json:"endKey,omitempty"`
	AddedL0Files         []*L0FileMeta `protobuf:"bytes,3,rep,name=addedL0Files,proto3" json:"addedL0Files,omitempty"`
	RemovedL0Files       []uint64      `protobuf:"varint,4,rep,packed,name=removedL0Files,proto3" json:"removedL0Files,omitempty"`
	AddedFiles           []*FileMeta   `protobuf:"bytes,5,rep,name=addedFiles,proto3" json:"addedFiles,omitempty"`
	RemovedFiles         []*FileMeta   `protobuf:"bytes,6,rep,name=removedFiles,proto3" json:"removedFiles,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *MetaChangeEvent) Reset()         { *m = MetaChangeEvent{} }
func (m *MetaChangeEvent) String() string { return proto.CompactTextString(m) }
func (*MetaChangeEvent) ProtoMessage()    {}
func (*MetaChangeEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_f60cc5f2f1819433, []int{0}
}
func (m *MetaChangeEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetaChangeEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetaChangeEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MetaChangeEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetaChangeEvent.Merge(m, src)
}
func (m *MetaChangeEvent) XXX_Size() int {
	return m.Size()
}
func (m *MetaChangeEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_MetaChangeEvent.DiscardUnknown(m)
}

var xxx_messageInfo_MetaChangeEvent proto.InternalMessageInfo

func (m *MetaChangeEvent) GetStartKey() []byte {
	if m != nil {
		return m.StartKey
	}
	return nil
}

func (m *MetaChangeEvent) GetEndKey() []byte {
	if m != nil {
		return m.EndKey
	}
	return nil
}

func (m *MetaChangeEvent) GetAddedL0Files() []*L0FileMeta {
	if m != nil {
		return m.AddedL0Files
	}
	return nil
}

func (m *MetaChangeEvent) GetRemovedL0Files() []uint64 {
	if m != nil {
		return m.RemovedL0Files
	}
	return nil
}

func (m *MetaChangeEvent) GetAddedFiles() []*FileMeta {
	if m != nil {
		return m.AddedFiles
	}
	return nil
}

func (m *MetaChangeEvent) GetRemovedFiles() []*FileMeta {
	if m != nil {
		return m.RemovedFiles
	}
	return nil
}

type L0FileMeta struct {
	ID                   uint64   `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	CommitTS             uint64   `protobuf:"varint,2,opt,name=CommitTS,proto3" json:"CommitTS,omitempty"`
	StartKey             []byte   `protobuf:"bytes,3,opt,name=startKey,proto3" json:"startKey,omitempty"`
	EndKey               []byte   `protobuf:"bytes,4,opt,name=endKey,proto3" json:"endKey,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *L0FileMeta) Reset()         { *m = L0FileMeta{} }
func (m *L0FileMeta) String() string { return proto.CompactTextString(m) }
func (*L0FileMeta) ProtoMessage()    {}
func (*L0FileMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_f60cc5f2f1819433, []int{1}
}
func (m *L0FileMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *L0FileMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_L0FileMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *L0FileMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L0FileMeta.Merge(m, src)
}
func (m *L0FileMeta) XXX_Size() int {
	return m.Size()
}
func (m *L0FileMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_L0FileMeta.DiscardUnknown(m)
}

var xxx_messageInfo_L0FileMeta proto.InternalMessageInfo

func (m *L0FileMeta) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *L0FileMeta) GetCommitTS() uint64 {
	if m != nil {
		return m.CommitTS
	}
	return 0
}

func (m *L0FileMeta) GetStartKey() []byte {
	if m != nil {
		return m.StartKey
	}
	return nil
}

func (m *L0FileMeta) GetEndKey() []byte {
	if m != nil {
		return m.EndKey
	}
	return nil
}

type FileMeta struct {
	ID                   uint64   `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	CF                   int32    `protobuf:"varint,2,opt,name=CF,proto3" json:"CF,omitempty"`
	Level                uint32   `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`
	Smallest             []byte   `protobuf:"bytes,4,opt,name=smallest,proto3" json:"smallest,omitempty"`
	Biggest              []byte   `protobuf:"bytes,5,opt,name=biggest,proto3" json:"biggest,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FileMeta) Reset()         { *m = FileMeta{} }
func (m *FileMeta) String() string { return proto.CompactTextString(m) }
func (*FileMeta) ProtoMessage()    {}
func (*FileMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_f60cc5f2f1819433, []int{2}
}
func (m *FileMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FileMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FileMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FileMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileMeta.Merge(m, src)
}
func (m *FileMeta) XXX_Size() int {
	return m.Size()
}
func (m *FileMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_FileMeta.DiscardUnknown(m)
}

var xxx_messageInfo_FileMeta proto.InternalMessageInfo

func (m *FileMeta) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *FileMeta) GetCF() int32 {
	if m != nil {
		return m.CF
	}
	return 0
}

func (m *FileMeta) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *FileMeta) GetSmallest() []byte {
	if m != nil {
		return m.Smallest
	}
	return nil
}

func (m *FileMeta) GetBiggest() []byte {
	if m != nil {
		return m.Biggest
	}
	return nil
}

func init() {
	proto.RegisterType((*MetaChangeEvent)(nil), "protos.MetaChangeEvent")
	proto.RegisterType((*L0FileMeta)(nil), "protos.L0FileMeta")
	proto.RegisterType((*FileMeta)(nil), "protos.FileMeta")
}

func init() { proto.RegisterFile("meta_change.proto", fileDescriptor_f60cc5f2f1819433) }

var fileDescriptor_f60cc5f2f1819433 = []byte{
	// 309 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x52, 0xcf, 0x4a, 0x84, 0x40,
	0x18, 0xcf, 0x51, 0xb7, 0xe5, 0x6b, 0xdb, 0xb6, 0x21, 0x62, 0xe9, 0x20, 0x8b, 0x87, 0xf0, 0xb4,
	0x2c, 0x15, 0x3d, 0x40, 0x6e, 0xc2, 0x52, 0x5d, 0xa6, 0xee, 0x31, 0x9b, 0x1f, 0x26, 0x8c, 0x1a,
	0x3a, 0x08, 0x3d, 0x44, 0xf7, 0x1e, 0xa9, 0x63, 0x8f, 0x10, 0xf6, 0x22, 0xe1, 0x8c, 0xeb, 0xae,
	0x81, 0x27, 0xf9, 0x7d, 0xbf, 0x7f, 0xfa, 0x43, 0x38, 0x4e, 0x50, 0xf2, 0xe7, 0x97, 0x57, 0x9e,
	0x46, 0x38, 0x7f, 0xcb, 0x33, 0x99, 0xd1, 0x81, 0x7a, 0x14, 0xee, 0x07, 0x81, 0xa3, 0x07, 0x94,
	0xdc, 0x57, 0xe4, 0x6d, 0x89, 0xa9, 0xa4, 0x67, 0x30, 0x2c, 0x24, 0xcf, 0xe5, 0x1d, 0xbe, 0x4f,
	0x8d, 0x99, 0xe1, 0x8d, 0x58, 0x8b, 0xe9, 0x29, 0x0c, 0x30, 0x0d, 0x6b, 0x86, 0x28, 0xa6, 0x41,
	0xf4, 0x1a, 0x46, 0x3c, 0x0c, 0x31, 0xbc, 0x5f, 0x04, 0xb1, 0xc0, 0x62, 0x6a, 0xce, 0x4c, 0xef,
	0xe0, 0x82, 0xea, 0xb6, 0x62, 0xae, 0xcf, 0x75, 0x11, 0xeb, 0xe8, 0xe8, 0x39, 0x8c, 0x73, 0x4c,
	0xb2, 0x72, 0xeb, 0xb4, 0x66, 0xa6, 0x67, 0xb1, 0x7f, 0x57, 0xba, 0x00, 0x50, 0x3e, 0xad, 0xb1,
	0x55, 0xfa, 0x64, 0x93, 0xde, 0x66, 0xef, 0x68, 0xe8, 0x15, 0x8c, 0x9a, 0x0c, 0xed, 0x19, 0xf4,
	0x78, 0x3a, 0x2a, 0x57, 0x00, 0x6c, 0xdf, 0x95, 0x8e, 0x81, 0xac, 0x96, 0x6a, 0x03, 0x8b, 0x91,
	0xd5, 0xb2, 0x5e, 0xc6, 0xcf, 0x92, 0x24, 0x96, 0x4f, 0x8f, 0xea, 0xfb, 0x2d, 0xd6, 0xe2, 0xce,
	0x6a, 0x66, 0xef, 0x6a, 0xd6, 0xee, 0x6a, 0x6e, 0x09, 0xc3, 0xde, 0xae, 0x31, 0x10, 0x3f, 0x50,
	0x2d, 0x36, 0x23, 0x7e, 0x40, 0x4f, 0xc0, 0x16, 0x58, 0xa2, 0x50, 0xe1, 0x87, 0x4c, 0x03, 0xd5,
	0x9a, 0x70, 0x21, 0xb0, 0x90, 0x4d, 0x76, 0x8b, 0xe9, 0x14, 0xf6, 0xd7, 0x71, 0x14, 0xd5, 0x94,
	0xad, 0xa8, 0x0d, 0xbc, 0x99, 0x7c, 0x55, 0x8e, 0xf1, 0x5d, 0x39, 0xc6, 0x4f, 0xe5, 0x18, 0x9f,
	0xbf, 0xce, 0xde, 0x5a, 0xff, 0x0f, 0x97, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xa0, 0xe3, 0x70,
	0x24, 0x2b, 0x02, 0x00, 0x00,
}

func (m *MetaChangeEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetaChangeEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetaChangeEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RemovedFiles) > 0 {
		for iNdEx := len(m.RemovedFiles) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RemovedFiles[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMetaChange(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.AddedFiles) > 0 {
		for iNdEx := len(m.AddedFiles) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AddedFiles[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMetaChange(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.RemovedL0Files) > 0 {
		dAtA2 := make([]byte, len(m.RemovedL0Files)*10)
		var j1 int
		for _, num := range m.RemovedL0Files {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintMetaChange(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x22
	}
	if len(m.AddedL0Files) > 0 {
		for iNdEx := len(m.AddedL0Files) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AddedL0Files[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMetaChange(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.EndKey) > 0 {
		i -= len(m.EndKey)
		copy(dAtA[i:], m.EndKey)
		i = encodeVarintMetaChange(dAtA, i, uint64(len(m.EndKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StartKey) > 0 {
		i -= len(m.StartKey)
		copy(dAtA[i:], m.StartKey)
		i = encodeVarintMetaChange(dAtA, i, uint64(len(m.StartKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *L0FileMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *L0FileMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *L0FileMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.EndKey) > 0 {
		i -= len(m.EndKey)
		copy(dAtA[i:], m.EndKey)
		i = encodeVarintMetaChange(dAtA, i, uint64(len(m.EndKey)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.StartKey) > 0 {
		i -= len(m.StartKey)
		copy(dAtA[i:], m.StartKey)
		i = encodeVarintMetaChange(dAtA, i, uint64(len(m.StartKey)))
		i--
		dAtA[i] = 0x1a
	}
	if m.CommitTS != 0 {
		i = encodeVarintMetaChange(dAtA, i, uint64(m.CommitTS))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintMetaChange(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FileMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FileMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Biggest) > 0 {
		i -= len(m.Biggest)
		copy(dAtA[i:], m.Biggest)
		i = encodeVarintMetaChange(dAtA, i, uint64(len(m.Biggest)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Smallest) > 0 {
		i -= len(m.Smallest)
		copy(dAtA[i:], m.Smallest)
		i = encodeVarintMetaChange(dAtA, i, uint64(len(m.Smallest)))
		i--
		dAtA[i] = 0x22
	}
	if m.Level != 0 {
		i = encodeVarintMetaChange(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x18
	}
	if m.CF != 0 {
		i = encodeVarintMetaChange(dAtA, i, uint64(m.CF))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintMetaChange(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMetaChange(dAtA []byte, offset int, v uint64) int {
	offset -= sovMetaChange(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MetaChangeEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StartKey)
	if l > 0 {
		n += 1 + l + sovMetaChange(uint64(l))
	}
	l = len(m.EndKey)
	if l > 0 {
		n += 1 + l + sovMetaChange(uint64(l))
	}
	if len(m.AddedL0Files) > 0 {
		for _, e := range m.AddedL0Files {
			l = e.Size()
			n += 1 + l + sovMetaChange(uint64(l))
		}
	}
	if len(m.RemovedL0Files) > 0 {
		l = 0
		for _, e := range m.RemovedL0Files {
			l += sovMetaChange(uint64(e))
		}
		n += 1 + sovMetaChange(uint64(l)) + l
	}
	if len(m.AddedFiles) > 0 {
		for _, e := range m.AddedFiles {
			l = e.Size()
			n += 1 + l + sovMetaChange(uint64(l))
		}
	}
	if len(m.RemovedFiles) > 0 {
		for _, e := range m.RemovedFiles {
			l = e.Size()
			n += 1 + l + sovMetaChange(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *L0FileMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovMetaChange(uint64(m.ID))
	}
	if m.CommitTS != 0 {
		n += 1 + sovMetaChange(uint64(m.CommitTS))
	}
	l = len(m.StartKey)
	if l > 0 {
		n += 1 + l + sovMetaChange(uint64(l))
	}
	l = len(m.EndKey)
	if l > 0 {
		n += 1 + l + sovMetaChange(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FileMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovMetaChange(uint64(m.ID))
	}
	if m.CF != 0 {
		n += 1 + sovMetaChange(uint64(m.CF))
	}
	if m.Level != 0 {
		n += 1 + sovMetaChange(uint64(m.Level))
	}
	l = len(m.Smallest)
	if l > 0 {
		n += 1 + l + sovMetaChange(uint64(l))
	}
	l = len(m.Biggest)
	if l > 0 {
		n += 1 + l + sovMetaChange(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMetaChange(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMetaChange(x uint64) (n int) {
	return sovMetaChange(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MetaChangeEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetaChange
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetaChangeEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetaChangeEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaChange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMetaChange
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMetaChange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartKey = append(m.StartKey[:0], dAtA[iNdEx:postIndex]...)
			if m.StartKey == nil {
				m.StartKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaChange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMetaChange
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMetaChange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndKey = append(m.EndKey[:0], dAtA[iNdEx:postIndex]...)
			if m.EndKey == nil {
				m.EndKey = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddedL0Files", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaChange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetaChange
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetaChange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddedL0Files = append(m.AddedL0Files, &L0FileMeta{})
			if err := m.AddedL0Files[len(m.AddedL0Files)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMetaChange
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RemovedL0Files = append(m.RemovedL0Files, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMetaChange
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMetaChange
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMetaChange
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.RemovedL0Files) == 0 {
					m.RemovedL0Files = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMetaChange
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RemovedL0Files = append(m.RemovedL0Files, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RemovedL0Files", wireType)
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddedFiles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaChange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetaChange
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetaChange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddedFiles = append(m.AddedFiles, &FileMeta{})
			if err := m.AddedFiles[len(m.AddedFiles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemovedFiles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaChange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetaChange
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetaChange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemovedFiles = append(m.RemovedFiles, &FileMeta{})
			if err := m.RemovedFiles[len(m.RemovedFiles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetaChange(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetaChange
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMetaChange
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *L0FileMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetaChange
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: L0FileMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: L0FileMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaChange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitTS", wireType)
			}
			m.CommitTS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaChange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommitTS |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaChange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMetaChange
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMetaChange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartKey = append(m.StartKey[:0], dAtA[iNdEx:postIndex]...)
			if m.StartKey == nil {
				m.StartKey = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaChange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMetaChange
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMetaChange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndKey = append(m.EndKey[:0], dAtA[iNdEx:postIndex]...)
			if m.EndKey == nil {
				m.EndKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetaChange(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetaChange
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMetaChange
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FileMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetaChange
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaChange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CF", wireType)
			}
			m.CF = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaChange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CF |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaChange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Smallest", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaChange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMetaChange
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMetaChange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Smallest = append(m.Smallest[:0], dAtA[iNdEx:postIndex]...)
			if m.Smallest == nil {
				m.Smallest = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Biggest", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaChange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMetaChange
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMetaChange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Biggest = append(m.Biggest[:0], dAtA[iNdEx:postIndex]...)
			if m.Biggest == nil {
				m.Biggest = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetaChange(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetaChange
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMetaChange
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMetaChange(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMetaChange
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetaChange
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetaChange
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMetaChange
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMetaChange
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMetaChange
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMetaChange        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMetaChange          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMetaChange = fmt.Errorf("proto: unexpected end of group")
)
