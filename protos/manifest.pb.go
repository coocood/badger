// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: manifest.proto

package protos

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SplitState int32

const (
	SplitState_INITIAL              SplitState = 0
	SplitState_PRE_SPLIT            SplitState = 1
	SplitState_PRE_SPLIT_FLUSH_DONE SplitState = 2
	SplitState_SPLIT_FILE_DONE      SplitState = 3
)

var SplitState_name = map[int32]string{
	0: "INITIAL",
	1: "PRE_SPLIT",
	2: "PRE_SPLIT_FLUSH_DONE",
	3: "SPLIT_FILE_DONE",
}

var SplitState_value = map[string]int32{
	"INITIAL":              0,
	"PRE_SPLIT":            1,
	"PRE_SPLIT_FLUSH_DONE": 2,
	"SPLIT_FILE_DONE":      3,
}

func (x SplitState) String() string {
	return proto.EnumName(SplitState_name, int32(x))
}

func (SplitState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0bb23f43f7afb4c1, []int{0}
}

type ManifestChange_Operation int32

const (
	ManifestChange_CREATE    ManifestChange_Operation = 0
	ManifestChange_DELETE    ManifestChange_Operation = 1
	ManifestChange_MOVE_DOWN ManifestChange_Operation = 2
)

var ManifestChange_Operation_name = map[int32]string{
	0: "CREATE",
	1: "DELETE",
	2: "MOVE_DOWN",
}

var ManifestChange_Operation_value = map[string]int32{
	"CREATE":    0,
	"DELETE":    1,
	"MOVE_DOWN": 2,
}

func (x ManifestChange_Operation) String() string {
	return proto.EnumName(ManifestChange_Operation_name, int32(x))
}

func (ManifestChange_Operation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0bb23f43f7afb4c1, []int{2, 0}
}

type ManifestChangeSet struct {
	// A set of changes that are applied atomically.
	Changes              []*ManifestChange `protobuf:"bytes,1,rep,name=changes,proto3" json:"changes,omitempty"`
	Head                 *HeadInfo         `protobuf:"bytes,2,opt,name=head,proto3" json:"head,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ManifestChangeSet) Reset()         { *m = ManifestChangeSet{} }
func (m *ManifestChangeSet) String() string { return proto.CompactTextString(m) }
func (*ManifestChangeSet) ProtoMessage()    {}
func (*ManifestChangeSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bb23f43f7afb4c1, []int{0}
}
func (m *ManifestChangeSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ManifestChangeSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ManifestChangeSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ManifestChangeSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ManifestChangeSet.Merge(m, src)
}
func (m *ManifestChangeSet) XXX_Size() int {
	return m.Size()
}
func (m *ManifestChangeSet) XXX_DiscardUnknown() {
	xxx_messageInfo_ManifestChangeSet.DiscardUnknown(m)
}

var xxx_messageInfo_ManifestChangeSet proto.InternalMessageInfo

func (m *ManifestChangeSet) GetChanges() []*ManifestChange {
	if m != nil {
		return m.Changes
	}
	return nil
}

func (m *ManifestChangeSet) GetHead() *HeadInfo {
	if m != nil {
		return m.Head
	}
	return nil
}

type HeadInfo struct {
	Version              uint64   `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	LogID                uint32   `protobuf:"varint,2,opt,name=logID,proto3" json:"logID,omitempty"`
	LogOffset            uint32   `protobuf:"varint,3,opt,name=logOffset,proto3" json:"logOffset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HeadInfo) Reset()         { *m = HeadInfo{} }
func (m *HeadInfo) String() string { return proto.CompactTextString(m) }
func (*HeadInfo) ProtoMessage()    {}
func (*HeadInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bb23f43f7afb4c1, []int{1}
}
func (m *HeadInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HeadInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HeadInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HeadInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeadInfo.Merge(m, src)
}
func (m *HeadInfo) XXX_Size() int {
	return m.Size()
}
func (m *HeadInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_HeadInfo.DiscardUnknown(m)
}

var xxx_messageInfo_HeadInfo proto.InternalMessageInfo

func (m *HeadInfo) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *HeadInfo) GetLogID() uint32 {
	if m != nil {
		return m.LogID
	}
	return 0
}

func (m *HeadInfo) GetLogOffset() uint32 {
	if m != nil {
		return m.LogOffset
	}
	return 0
}

type ManifestChange struct {
	ID                   uint64                   `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Op                   ManifestChange_Operation `protobuf:"varint,2,opt,name=op,proto3,enum=protos.ManifestChange_Operation" json:"op,omitempty"`
	Level                uint32                   `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *ManifestChange) Reset()         { *m = ManifestChange{} }
func (m *ManifestChange) String() string { return proto.CompactTextString(m) }
func (*ManifestChange) ProtoMessage()    {}
func (*ManifestChange) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bb23f43f7afb4c1, []int{2}
}
func (m *ManifestChange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ManifestChange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ManifestChange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ManifestChange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ManifestChange.Merge(m, src)
}
func (m *ManifestChange) XXX_Size() int {
	return m.Size()
}
func (m *ManifestChange) XXX_DiscardUnknown() {
	xxx_messageInfo_ManifestChange.DiscardUnknown(m)
}

var xxx_messageInfo_ManifestChange proto.InternalMessageInfo

func (m *ManifestChange) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *ManifestChange) GetOp() ManifestChange_Operation {
	if m != nil {
		return m.Op
	}
	return ManifestChange_CREATE
}

func (m *ManifestChange) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

type ShardChangeSet struct {
	ShardID              uint64           `protobuf:"varint,1,opt,name=shardID,proto3" json:"shardID,omitempty"`
	ShardVer             uint64           `protobuf:"varint,2,opt,name=shardVer,proto3" json:"shardVer,omitempty"`
	DataVer              uint64           `protobuf:"varint,3,opt,name=dataVer,proto3" json:"dataVer,omitempty"`
	Compaction           *ShardCompaction `protobuf:"bytes,4,opt,name=compaction,proto3" json:"compaction,omitempty"`
	Flush                *ShardFlush      `protobuf:"bytes,5,opt,name=flush,proto3" json:"flush,omitempty"`
	Snapshot             *ShardSnapshot   `protobuf:"bytes,6,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
	State                SplitState       `protobuf:"varint,7,opt,name=state,proto3,enum=protos.SplitState" json:"state,omitempty"`
	PreSplit             *ShardPreSplit   `protobuf:"bytes,8,opt,name=preSplit,proto3" json:"preSplit,omitempty"`
	SplitFiles           *ShardSplitFiles `protobuf:"bytes,9,opt,name=splitFiles,proto3" json:"splitFiles,omitempty"`
	Split                *ShardSplit      `protobuf:"bytes,10,opt,name=split,proto3" json:"split,omitempty"`
	ShardDelete          bool             `protobuf:"varint,11,opt,name=shardDelete,proto3" json:"shardDelete,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ShardChangeSet) Reset()         { *m = ShardChangeSet{} }
func (m *ShardChangeSet) String() string { return proto.CompactTextString(m) }
func (*ShardChangeSet) ProtoMessage()    {}
func (*ShardChangeSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bb23f43f7afb4c1, []int{3}
}
func (m *ShardChangeSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShardChangeSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShardChangeSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShardChangeSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShardChangeSet.Merge(m, src)
}
func (m *ShardChangeSet) XXX_Size() int {
	return m.Size()
}
func (m *ShardChangeSet) XXX_DiscardUnknown() {
	xxx_messageInfo_ShardChangeSet.DiscardUnknown(m)
}

var xxx_messageInfo_ShardChangeSet proto.InternalMessageInfo

func (m *ShardChangeSet) GetShardID() uint64 {
	if m != nil {
		return m.ShardID
	}
	return 0
}

func (m *ShardChangeSet) GetShardVer() uint64 {
	if m != nil {
		return m.ShardVer
	}
	return 0
}

func (m *ShardChangeSet) GetDataVer() uint64 {
	if m != nil {
		return m.DataVer
	}
	return 0
}

func (m *ShardChangeSet) GetCompaction() *ShardCompaction {
	if m != nil {
		return m.Compaction
	}
	return nil
}

func (m *ShardChangeSet) GetFlush() *ShardFlush {
	if m != nil {
		return m.Flush
	}
	return nil
}

func (m *ShardChangeSet) GetSnapshot() *ShardSnapshot {
	if m != nil {
		return m.Snapshot
	}
	return nil
}

func (m *ShardChangeSet) GetState() SplitState {
	if m != nil {
		return m.State
	}
	return SplitState_INITIAL
}

func (m *ShardChangeSet) GetPreSplit() *ShardPreSplit {
	if m != nil {
		return m.PreSplit
	}
	return nil
}

func (m *ShardChangeSet) GetSplitFiles() *ShardSplitFiles {
	if m != nil {
		return m.SplitFiles
	}
	return nil
}

func (m *ShardChangeSet) GetSplit() *ShardSplit {
	if m != nil {
		return m.Split
	}
	return nil
}

func (m *ShardChangeSet) GetShardDelete() bool {
	if m != nil {
		return m.ShardDelete
	}
	return false
}

type ShardCompaction struct {
	Cf                   int32          `protobuf:"varint,1,opt,name=cf,proto3" json:"cf,omitempty"`
	Level                uint32         `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	TableCreates         []*TableCreate `protobuf:"bytes,3,rep,name=tableCreates,proto3" json:"tableCreates,omitempty"`
	TopDeletes           []uint64       `protobuf:"varint,4,rep,packed,name=topDeletes,proto3" json:"topDeletes,omitempty"`
	BottomDeletes        []uint64       `protobuf:"varint,5,rep,packed,name=bottomDeletes,proto3" json:"bottomDeletes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ShardCompaction) Reset()         { *m = ShardCompaction{} }
func (m *ShardCompaction) String() string { return proto.CompactTextString(m) }
func (*ShardCompaction) ProtoMessage()    {}
func (*ShardCompaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bb23f43f7afb4c1, []int{4}
}
func (m *ShardCompaction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShardCompaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShardCompaction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShardCompaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShardCompaction.Merge(m, src)
}
func (m *ShardCompaction) XXX_Size() int {
	return m.Size()
}
func (m *ShardCompaction) XXX_DiscardUnknown() {
	xxx_messageInfo_ShardCompaction.DiscardUnknown(m)
}

var xxx_messageInfo_ShardCompaction proto.InternalMessageInfo

func (m *ShardCompaction) GetCf() int32 {
	if m != nil {
		return m.Cf
	}
	return 0
}

func (m *ShardCompaction) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *ShardCompaction) GetTableCreates() []*TableCreate {
	if m != nil {
		return m.TableCreates
	}
	return nil
}

func (m *ShardCompaction) GetTopDeletes() []uint64 {
	if m != nil {
		return m.TopDeletes
	}
	return nil
}

func (m *ShardCompaction) GetBottomDeletes() []uint64 {
	if m != nil {
		return m.BottomDeletes
	}
	return nil
}

type ShardFlush struct {
	L0Creates            []*L0Create `protobuf:"bytes,1,rep,name=l0Creates,proto3" json:"l0Creates,omitempty"`
	CommitTS             uint64      `protobuf:"varint,2,opt,name=commitTS,proto3" json:"commitTS,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ShardFlush) Reset()         { *m = ShardFlush{} }
func (m *ShardFlush) String() string { return proto.CompactTextString(m) }
func (*ShardFlush) ProtoMessage()    {}
func (*ShardFlush) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bb23f43f7afb4c1, []int{5}
}
func (m *ShardFlush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShardFlush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShardFlush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShardFlush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShardFlush.Merge(m, src)
}
func (m *ShardFlush) XXX_Size() int {
	return m.Size()
}
func (m *ShardFlush) XXX_DiscardUnknown() {
	xxx_messageInfo_ShardFlush.DiscardUnknown(m)
}

var xxx_messageInfo_ShardFlush proto.InternalMessageInfo

func (m *ShardFlush) GetL0Creates() []*L0Create {
	if m != nil {
		return m.L0Creates
	}
	return nil
}

func (m *ShardFlush) GetCommitTS() uint64 {
	if m != nil {
		return m.CommitTS
	}
	return 0
}

type ShardSnapshot struct {
	Start                []byte           `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	End                  []byte           `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
	Properties           *ShardProperties `protobuf:"bytes,3,opt,name=properties,proto3" json:"properties,omitempty"`
	SplitKeys            [][]byte         `protobuf:"bytes,4,rep,name=splitKeys,proto3" json:"splitKeys,omitempty"`
	L0Creates            []*L0Create      `protobuf:"bytes,5,rep,name=l0Creates,proto3" json:"l0Creates,omitempty"`
	TableCreates         []*TableCreate   `protobuf:"bytes,6,rep,name=tableCreates,proto3" json:"tableCreates,omitempty"`
	CommitTS             uint64           `protobuf:"varint,7,opt,name=commitTS,proto3" json:"commitTS,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ShardSnapshot) Reset()         { *m = ShardSnapshot{} }
func (m *ShardSnapshot) String() string { return proto.CompactTextString(m) }
func (*ShardSnapshot) ProtoMessage()    {}
func (*ShardSnapshot) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bb23f43f7afb4c1, []int{6}
}
func (m *ShardSnapshot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShardSnapshot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShardSnapshot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShardSnapshot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShardSnapshot.Merge(m, src)
}
func (m *ShardSnapshot) XXX_Size() int {
	return m.Size()
}
func (m *ShardSnapshot) XXX_DiscardUnknown() {
	xxx_messageInfo_ShardSnapshot.DiscardUnknown(m)
}

var xxx_messageInfo_ShardSnapshot proto.InternalMessageInfo

func (m *ShardSnapshot) GetStart() []byte {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *ShardSnapshot) GetEnd() []byte {
	if m != nil {
		return m.End
	}
	return nil
}

func (m *ShardSnapshot) GetProperties() *ShardProperties {
	if m != nil {
		return m.Properties
	}
	return nil
}

func (m *ShardSnapshot) GetSplitKeys() [][]byte {
	if m != nil {
		return m.SplitKeys
	}
	return nil
}

func (m *ShardSnapshot) GetL0Creates() []*L0Create {
	if m != nil {
		return m.L0Creates
	}
	return nil
}

func (m *ShardSnapshot) GetTableCreates() []*TableCreate {
	if m != nil {
		return m.TableCreates
	}
	return nil
}

func (m *ShardSnapshot) GetCommitTS() uint64 {
	if m != nil {
		return m.CommitTS
	}
	return 0
}

type ShardSplitFiles struct {
	L0Creates            []*L0Create    `protobuf:"bytes,1,rep,name=l0Creates,proto3" json:"l0Creates,omitempty"`
	TableCreates         []*TableCreate `protobuf:"bytes,2,rep,name=tableCreates,proto3" json:"tableCreates,omitempty"`
	TableDeletes         []uint64       `protobuf:"varint,3,rep,packed,name=tableDeletes,proto3" json:"tableDeletes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ShardSplitFiles) Reset()         { *m = ShardSplitFiles{} }
func (m *ShardSplitFiles) String() string { return proto.CompactTextString(m) }
func (*ShardSplitFiles) ProtoMessage()    {}
func (*ShardSplitFiles) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bb23f43f7afb4c1, []int{7}
}
func (m *ShardSplitFiles) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShardSplitFiles) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShardSplitFiles.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShardSplitFiles) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShardSplitFiles.Merge(m, src)
}
func (m *ShardSplitFiles) XXX_Size() int {
	return m.Size()
}
func (m *ShardSplitFiles) XXX_DiscardUnknown() {
	xxx_messageInfo_ShardSplitFiles.DiscardUnknown(m)
}

var xxx_messageInfo_ShardSplitFiles proto.InternalMessageInfo

func (m *ShardSplitFiles) GetL0Creates() []*L0Create {
	if m != nil {
		return m.L0Creates
	}
	return nil
}

func (m *ShardSplitFiles) GetTableCreates() []*TableCreate {
	if m != nil {
		return m.TableCreates
	}
	return nil
}

func (m *ShardSplitFiles) GetTableDeletes() []uint64 {
	if m != nil {
		return m.TableDeletes
	}
	return nil
}

type L0Create struct {
	ID                   uint64           `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Start                []byte           `protobuf:"bytes,2,opt,name=start,proto3" json:"start,omitempty"`
	End                  []byte           `protobuf:"bytes,3,opt,name=end,proto3" json:"end,omitempty"`
	Properties           *ShardProperties `protobuf:"bytes,4,opt,name=properties,proto3" json:"properties,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *L0Create) Reset()         { *m = L0Create{} }
func (m *L0Create) String() string { return proto.CompactTextString(m) }
func (*L0Create) ProtoMessage()    {}
func (*L0Create) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bb23f43f7afb4c1, []int{8}
}
func (m *L0Create) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *L0Create) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_L0Create.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *L0Create) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L0Create.Merge(m, src)
}
func (m *L0Create) XXX_Size() int {
	return m.Size()
}
func (m *L0Create) XXX_DiscardUnknown() {
	xxx_messageInfo_L0Create.DiscardUnknown(m)
}

var xxx_messageInfo_L0Create proto.InternalMessageInfo

func (m *L0Create) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *L0Create) GetStart() []byte {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *L0Create) GetEnd() []byte {
	if m != nil {
		return m.End
	}
	return nil
}

func (m *L0Create) GetProperties() *ShardProperties {
	if m != nil {
		return m.Properties
	}
	return nil
}

type TableCreate struct {
	ID                   uint64   `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Level                uint32   `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	CF                   int32    `protobuf:"varint,3,opt,name=CF,proto3" json:"CF,omitempty"`
	Smallest             []byte   `protobuf:"bytes,4,opt,name=smallest,proto3" json:"smallest,omitempty"`
	Biggest              []byte   `protobuf:"bytes,5,opt,name=biggest,proto3" json:"biggest,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TableCreate) Reset()         { *m = TableCreate{} }
func (m *TableCreate) String() string { return proto.CompactTextString(m) }
func (*TableCreate) ProtoMessage()    {}
func (*TableCreate) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bb23f43f7afb4c1, []int{9}
}
func (m *TableCreate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TableCreate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TableCreate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TableCreate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableCreate.Merge(m, src)
}
func (m *TableCreate) XXX_Size() int {
	return m.Size()
}
func (m *TableCreate) XXX_DiscardUnknown() {
	xxx_messageInfo_TableCreate.DiscardUnknown(m)
}

var xxx_messageInfo_TableCreate proto.InternalMessageInfo

func (m *TableCreate) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *TableCreate) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *TableCreate) GetCF() int32 {
	if m != nil {
		return m.CF
	}
	return 0
}

func (m *TableCreate) GetSmallest() []byte {
	if m != nil {
		return m.Smallest
	}
	return nil
}

func (m *TableCreate) GetBiggest() []byte {
	if m != nil {
		return m.Biggest
	}
	return nil
}

type ShardPreSplit struct {
	Keys [][]byte `protobuf:"bytes,1,rep,name=Keys,proto3" json:"Keys,omitempty"`
	// the properties that is in mem-table, not persistent.
	// If it is nil, then the pre split is stable.
	MemProps             *ShardProperties `protobuf:"bytes,2,opt,name=memProps,proto3" json:"memProps,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ShardPreSplit) Reset()         { *m = ShardPreSplit{} }
func (m *ShardPreSplit) String() string { return proto.CompactTextString(m) }
func (*ShardPreSplit) ProtoMessage()    {}
func (*ShardPreSplit) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bb23f43f7afb4c1, []int{10}
}
func (m *ShardPreSplit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShardPreSplit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShardPreSplit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShardPreSplit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShardPreSplit.Merge(m, src)
}
func (m *ShardPreSplit) XXX_Size() int {
	return m.Size()
}
func (m *ShardPreSplit) XXX_DiscardUnknown() {
	xxx_messageInfo_ShardPreSplit.DiscardUnknown(m)
}

var xxx_messageInfo_ShardPreSplit proto.InternalMessageInfo

func (m *ShardPreSplit) GetKeys() [][]byte {
	if m != nil {
		return m.Keys
	}
	return nil
}

func (m *ShardPreSplit) GetMemProps() *ShardProperties {
	if m != nil {
		return m.MemProps
	}
	return nil
}

type ShardSplit struct {
	NewShards            []*ShardProperties `protobuf:"bytes,1,rep,name=newShards,proto3" json:"newShards,omitempty"`
	Keys                 [][]byte           `protobuf:"bytes,3,rep,name=Keys,proto3" json:"Keys,omitempty"`
	MemProps             *ShardProperties   `protobuf:"bytes,4,opt,name=memProps,proto3" json:"memProps,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ShardSplit) Reset()         { *m = ShardSplit{} }
func (m *ShardSplit) String() string { return proto.CompactTextString(m) }
func (*ShardSplit) ProtoMessage()    {}
func (*ShardSplit) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bb23f43f7afb4c1, []int{11}
}
func (m *ShardSplit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShardSplit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShardSplit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShardSplit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShardSplit.Merge(m, src)
}
func (m *ShardSplit) XXX_Size() int {
	return m.Size()
}
func (m *ShardSplit) XXX_DiscardUnknown() {
	xxx_messageInfo_ShardSplit.DiscardUnknown(m)
}

var xxx_messageInfo_ShardSplit proto.InternalMessageInfo

func (m *ShardSplit) GetNewShards() []*ShardProperties {
	if m != nil {
		return m.NewShards
	}
	return nil
}

func (m *ShardSplit) GetKeys() [][]byte {
	if m != nil {
		return m.Keys
	}
	return nil
}

func (m *ShardSplit) GetMemProps() *ShardProperties {
	if m != nil {
		return m.MemProps
	}
	return nil
}

type ShardProperties struct {
	ShardID              uint64   `protobuf:"varint,1,opt,name=shardID,proto3" json:"shardID,omitempty"`
	Keys                 []string `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
	Values               [][]byte `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShardProperties) Reset()         { *m = ShardProperties{} }
func (m *ShardProperties) String() string { return proto.CompactTextString(m) }
func (*ShardProperties) ProtoMessage()    {}
func (*ShardProperties) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bb23f43f7afb4c1, []int{12}
}
func (m *ShardProperties) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShardProperties) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShardProperties.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShardProperties) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShardProperties.Merge(m, src)
}
func (m *ShardProperties) XXX_Size() int {
	return m.Size()
}
func (m *ShardProperties) XXX_DiscardUnknown() {
	xxx_messageInfo_ShardProperties.DiscardUnknown(m)
}

var xxx_messageInfo_ShardProperties proto.InternalMessageInfo

func (m *ShardProperties) GetShardID() uint64 {
	if m != nil {
		return m.ShardID
	}
	return 0
}

func (m *ShardProperties) GetKeys() []string {
	if m != nil {
		return m.Keys
	}
	return nil
}

func (m *ShardProperties) GetValues() [][]byte {
	if m != nil {
		return m.Values
	}
	return nil
}

func init() {
	proto.RegisterEnum("protos.SplitState", SplitState_name, SplitState_value)
	proto.RegisterEnum("protos.ManifestChange_Operation", ManifestChange_Operation_name, ManifestChange_Operation_value)
	proto.RegisterType((*ManifestChangeSet)(nil), "protos.ManifestChangeSet")
	proto.RegisterType((*HeadInfo)(nil), "protos.HeadInfo")
	proto.RegisterType((*ManifestChange)(nil), "protos.ManifestChange")
	proto.RegisterType((*ShardChangeSet)(nil), "protos.ShardChangeSet")
	proto.RegisterType((*ShardCompaction)(nil), "protos.ShardCompaction")
	proto.RegisterType((*ShardFlush)(nil), "protos.ShardFlush")
	proto.RegisterType((*ShardSnapshot)(nil), "protos.ShardSnapshot")
	proto.RegisterType((*ShardSplitFiles)(nil), "protos.ShardSplitFiles")
	proto.RegisterType((*L0Create)(nil), "protos.L0Create")
	proto.RegisterType((*TableCreate)(nil), "protos.TableCreate")
	proto.RegisterType((*ShardPreSplit)(nil), "protos.ShardPreSplit")
	proto.RegisterType((*ShardSplit)(nil), "protos.ShardSplit")
	proto.RegisterType((*ShardProperties)(nil), "protos.ShardProperties")
}

func init() { proto.RegisterFile("manifest.proto", fileDescriptor_0bb23f43f7afb4c1) }

var fileDescriptor_0bb23f43f7afb4c1 = []byte{
	// 906 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0xcd, 0x6e, 0x23, 0x45,
	0x10, 0xce, 0xfc, 0xf8, 0xaf, 0xec, 0x78, 0x87, 0xde, 0x65, 0x19, 0x21, 0x64, 0x59, 0xa3, 0x3d,
	0x58, 0x1c, 0xa2, 0x90, 0x15, 0xda, 0xf3, 0x62, 0x8f, 0xb5, 0x23, 0xbc, 0x71, 0xd4, 0x36, 0x9b,
	0xdc, 0xa2, 0x89, 0xd3, 0xfe, 0xd1, 0x8e, 0x3d, 0xa3, 0xe9, 0xde, 0xa0, 0x15, 0xaf, 0xc0, 0x8d,
	0x0b, 0x07, 0xc4, 0x63, 0xf0, 0x0c, 0x1c, 0x39, 0x72, 0x44, 0xe1, 0x45, 0x50, 0x57, 0x4f, 0xcf,
	0x4f, 0xe2, 0x40, 0x38, 0xb9, 0xab, 0xbe, 0xaf, 0xab, 0xbe, 0xae, 0xaa, 0xee, 0x31, 0x74, 0xb7,
	0xe1, 0x6e, 0xb3, 0x64, 0x5c, 0x1c, 0x25, 0x69, 0x2c, 0x62, 0x52, 0xc7, 0x1f, 0xee, 0xbd, 0x87,
	0x4f, 0xde, 0x66, 0xc8, 0x70, 0x1d, 0xee, 0x56, 0x6c, 0xc6, 0x04, 0x39, 0x86, 0xc6, 0x02, 0x0d,
	0xee, 0x1a, 0x7d, 0x6b, 0xd0, 0x3e, 0x79, 0xae, 0x76, 0xf1, 0xa3, 0x2a, 0x97, 0x6a, 0x1a, 0x79,
	0x01, 0xf6, 0x9a, 0x85, 0xd7, 0xae, 0xd9, 0x37, 0x06, 0xed, 0x13, 0x47, 0xd3, 0xdf, 0xb0, 0xf0,
	0x3a, 0xd8, 0x2d, 0x63, 0x8a, 0xa8, 0x77, 0x01, 0x4d, 0xed, 0x21, 0x2e, 0x34, 0x6e, 0x58, 0xca,
	0x37, 0xf1, 0xce, 0x35, 0xfa, 0xc6, 0xc0, 0xa6, 0xda, 0x24, 0xcf, 0xa0, 0x16, 0xc5, 0xab, 0x60,
	0x84, 0xc1, 0x0e, 0xa9, 0x32, 0xc8, 0x17, 0xd0, 0x8a, 0xe2, 0xd5, 0x74, 0xb9, 0xe4, 0x4c, 0xb8,
	0x16, 0x22, 0x85, 0xc3, 0xfb, 0xc5, 0x80, 0x6e, 0x55, 0x1b, 0xe9, 0x82, 0x19, 0x8c, 0xb2, 0xd8,
	0x66, 0x30, 0x22, 0xc7, 0x60, 0xc6, 0x09, 0xc6, 0xec, 0x9e, 0xf4, 0xf7, 0x9f, 0xe7, 0x68, 0x9a,
	0xb0, 0x34, 0x14, 0x9b, 0x78, 0x47, 0xcd, 0x38, 0x41, 0x21, 0xec, 0x86, 0x45, 0x59, 0x3a, 0x65,
	0x78, 0x27, 0xd0, 0xca, 0x69, 0x04, 0xa0, 0x3e, 0xa4, 0xfe, 0xeb, 0xb9, 0xef, 0x1c, 0xc8, 0xf5,
	0xc8, 0x9f, 0xf8, 0x73, 0xdf, 0x31, 0xc8, 0x21, 0xb4, 0xde, 0x4e, 0xdf, 0xf9, 0x97, 0xa3, 0xe9,
	0xf9, 0xa9, 0x63, 0x7a, 0x7f, 0x5a, 0xd0, 0x9d, 0xad, 0xc3, 0xf4, 0xba, 0xa8, 0xb1, 0x0b, 0x0d,
	0x2e, 0x3d, 0xb9, 0x46, 0x6d, 0x92, 0xcf, 0xa1, 0x89, 0xcb, 0x77, 0x2c, 0x45, 0xb9, 0x36, 0xcd,
	0x6d, 0xb9, 0xeb, 0x3a, 0x14, 0xa1, 0x84, 0x2c, 0xb5, 0x2b, 0x33, 0xc9, 0x2b, 0x80, 0x45, 0xbc,
	0x4d, 0xc2, 0x85, 0xd4, 0xe5, 0xda, 0xd8, 0x87, 0xcf, 0xf4, 0x31, 0x55, 0xee, 0x1c, 0xa6, 0x25,
	0x2a, 0x19, 0x40, 0x6d, 0x19, 0x7d, 0xe0, 0x6b, 0xb7, 0x86, 0x7b, 0x48, 0x65, 0xcf, 0x58, 0x22,
	0x54, 0x11, 0xc8, 0x57, 0xd0, 0xe4, 0xbb, 0x30, 0xe1, 0xeb, 0x58, 0xb8, 0x75, 0x24, 0x7f, 0x5a,
	0x21, 0xcf, 0x32, 0x90, 0xe6, 0x34, 0x19, 0x9c, 0x8b, 0x50, 0x30, 0xb7, 0x81, 0x75, 0x2f, 0x82,
	0x27, 0xd1, 0x46, 0xcc, 0x24, 0x42, 0x15, 0x41, 0x06, 0x4f, 0x52, 0x86, 0x7e, 0xb7, 0xb9, 0x27,
	0xf8, 0x59, 0x06, 0xd2, 0x9c, 0x26, 0x8f, 0xcc, 0xe5, 0x62, 0xbc, 0x89, 0x18, 0x77, 0x5b, 0x7b,
	0x8e, 0x3c, 0xcb, 0x61, 0x5a, 0xa2, 0xa2, 0x2a, 0x4c, 0x04, 0x7b, 0x8e, 0xac, 0xb2, 0x28, 0x02,
	0xe9, 0x43, 0x1b, 0x6b, 0x3f, 0x62, 0x11, 0x13, 0xcc, 0x6d, 0xf7, 0x8d, 0x41, 0x93, 0x96, 0x5d,
	0xde, 0x6f, 0x06, 0x3c, 0xb9, 0x53, 0x5e, 0x39, 0x7a, 0x8b, 0x25, 0xb6, 0xb5, 0x46, 0xcd, 0xc5,
	0xb2, 0x18, 0x24, 0xb3, 0x34, 0x48, 0xe4, 0x15, 0x74, 0x44, 0x78, 0x15, 0xb1, 0x61, 0xca, 0x42,
	0xc1, 0xb8, 0x6b, 0xe1, 0x55, 0x7b, 0xaa, 0xc5, 0xcc, 0x0b, 0x8c, 0x56, 0x88, 0xa4, 0x07, 0x20,
	0xe2, 0x44, 0xe5, 0xe7, 0xae, 0xdd, 0xb7, 0x06, 0x36, 0x2d, 0x79, 0xc8, 0x0b, 0x38, 0xbc, 0x8a,
	0x85, 0x88, 0xb7, 0x9a, 0x52, 0x43, 0x4a, 0xd5, 0xe9, 0x5d, 0x00, 0x14, 0x2d, 0x26, 0x47, 0xd0,
	0x8a, 0x8e, 0xb5, 0x12, 0x75, 0xe9, 0xf3, 0x5b, 0x3c, 0xc9, 0x00, 0x5a, 0x50, 0xe4, 0x90, 0x2e,
	0xe2, 0xed, 0x76, 0x23, 0xe6, 0x33, 0x3d, 0xa4, 0xda, 0xf6, 0x7e, 0x32, 0xe1, 0xb0, 0x32, 0x10,
	0xb2, 0x00, 0x5c, 0x84, 0xa9, 0xc0, 0x9a, 0x74, 0xa8, 0x32, 0x88, 0x03, 0x16, 0xdb, 0xa9, 0x37,
	0xa3, 0x43, 0xe5, 0x52, 0x76, 0x34, 0x49, 0xe3, 0x84, 0xa5, 0x62, 0x83, 0x05, 0xb9, 0xdf, 0xd1,
	0xb3, 0x1c, 0xa6, 0x25, 0xaa, 0x7c, 0x1d, 0xb0, 0x61, 0xdf, 0xb2, 0x8f, 0xaa, 0x22, 0x1d, 0x5a,
	0x38, 0xaa, 0x87, 0xab, 0xfd, 0xf7, 0xe1, 0xee, 0x76, 0xa6, 0xfe, 0xd8, 0xce, 0x94, 0xab, 0xd2,
	0xb8, 0x53, 0x95, 0x5f, 0xf5, 0xa0, 0x14, 0x43, 0xf9, 0xbf, 0xab, 0x7e, 0x57, 0x98, 0xf9, 0x58,
	0x61, 0x5e, 0xb6, 0x51, 0x4f, 0x84, 0x85, 0x13, 0x51, 0xf1, 0x79, 0x3f, 0x40, 0x53, 0xe7, 0xbc,
	0xf7, 0x78, 0xe6, 0x0d, 0x34, 0xf7, 0x34, 0xd0, 0x7a, 0xa8, 0x81, 0xf6, 0xa3, 0x1b, 0xe8, 0x7d,
	0x84, 0x76, 0x49, 0xfd, 0xbe, 0xfc, 0x7b, 0x6e, 0x50, 0x17, 0xcc, 0xe1, 0x18, 0xd3, 0xd7, 0xa8,
	0x39, 0x1c, 0xe3, 0xcb, 0xb9, 0x0d, 0xa3, 0x88, 0x71, 0x81, 0xb9, 0x3b, 0x34, 0xb7, 0xe5, 0xcb,
	0x79, 0xb5, 0x59, 0xad, 0x24, 0x54, 0x43, 0x48, 0x9b, 0xde, 0x45, 0x36, 0xad, 0xfa, 0x85, 0x21,
	0x04, 0x6c, 0x9c, 0x23, 0x03, 0xe7, 0x08, 0xd7, 0xe4, 0x25, 0x34, 0xb7, 0x6c, 0x2b, 0xc5, 0xf3,
	0xec, 0x23, 0xf7, 0xe0, 0xb1, 0x72, 0xa2, 0xf7, 0xa3, 0x91, 0xdd, 0x31, 0x15, 0xf7, 0x6b, 0x68,
	0xed, 0xd8, 0xf7, 0xe8, 0xd0, 0xdd, 0x7e, 0x30, 0x48, 0xc1, 0xcc, 0xe5, 0x58, 0x0f, 0xc8, 0xb1,
	0x1f, 0x2b, 0xe7, 0x3c, 0x1b, 0xc0, 0x02, 0xfc, 0x97, 0xaf, 0x10, 0x01, 0xfb, 0xbd, 0xcc, 0x2a,
	0x47, 0xac, 0x45, 0x71, 0x4d, 0x9e, 0x43, 0xfd, 0x26, 0x8c, 0x3e, 0x30, 0xad, 0x25, 0xb3, 0xbe,
	0x3c, 0x07, 0x28, 0x1e, 0x74, 0xd2, 0x86, 0x46, 0x70, 0x1a, 0xcc, 0x83, 0xd7, 0x13, 0xe7, 0x40,
	0x7e, 0x08, 0xcf, 0xa8, 0x7f, 0x39, 0x3b, 0x9b, 0x04, 0x73, 0xc7, 0x20, 0x2e, 0x3c, 0xcb, 0xcd,
	0xcb, 0xf1, 0xe4, 0xbb, 0xd9, 0x9b, 0xcb, 0xd1, 0xf4, 0xd4, 0x77, 0x4c, 0xf2, 0x14, 0x9e, 0x64,
	0xde, 0x60, 0xe2, 0x2b, 0xa7, 0xf5, 0x8d, 0xf3, 0xfb, 0x6d, 0xcf, 0xf8, 0xe3, 0xb6, 0x67, 0xfc,
	0x75, 0xdb, 0x33, 0x7e, 0xfe, 0xbb, 0x77, 0x70, 0xa5, 0xfe, 0xb7, 0xbc, 0xfc, 0x27, 0x00, 0x00,
	0xff, 0xff, 0x91, 0x10, 0xfe, 0x53, 0xd0, 0x08, 0x00, 0x00,
}

func (m *ManifestChangeSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ManifestChangeSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ManifestChangeSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Head != nil {
		{
			size, err := m.Head.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintManifest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Changes) > 0 {
		for iNdEx := len(m.Changes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Changes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintManifest(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *HeadInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeadInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HeadInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LogOffset != 0 {
		i = encodeVarintManifest(dAtA, i, uint64(m.LogOffset))
		i--
		dAtA[i] = 0x18
	}
	if m.LogID != 0 {
		i = encodeVarintManifest(dAtA, i, uint64(m.LogID))
		i--
		dAtA[i] = 0x10
	}
	if m.Version != 0 {
		i = encodeVarintManifest(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ManifestChange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ManifestChange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ManifestChange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Level != 0 {
		i = encodeVarintManifest(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x18
	}
	if m.Op != 0 {
		i = encodeVarintManifest(dAtA, i, uint64(m.Op))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintManifest(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ShardChangeSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShardChangeSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShardChangeSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ShardDelete {
		i--
		if m.ShardDelete {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.Split != nil {
		{
			size, err := m.Split.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintManifest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.SplitFiles != nil {
		{
			size, err := m.SplitFiles.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintManifest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.PreSplit != nil {
		{
			size, err := m.PreSplit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintManifest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.State != 0 {
		i = encodeVarintManifest(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x38
	}
	if m.Snapshot != nil {
		{
			size, err := m.Snapshot.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintManifest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Flush != nil {
		{
			size, err := m.Flush.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintManifest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Compaction != nil {
		{
			size, err := m.Compaction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintManifest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.DataVer != 0 {
		i = encodeVarintManifest(dAtA, i, uint64(m.DataVer))
		i--
		dAtA[i] = 0x18
	}
	if m.ShardVer != 0 {
		i = encodeVarintManifest(dAtA, i, uint64(m.ShardVer))
		i--
		dAtA[i] = 0x10
	}
	if m.ShardID != 0 {
		i = encodeVarintManifest(dAtA, i, uint64(m.ShardID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ShardCompaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShardCompaction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShardCompaction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.BottomDeletes) > 0 {
		dAtA9 := make([]byte, len(m.BottomDeletes)*10)
		var j8 int
		for _, num := range m.BottomDeletes {
			for num >= 1<<7 {
				dAtA9[j8] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j8++
			}
			dAtA9[j8] = uint8(num)
			j8++
		}
		i -= j8
		copy(dAtA[i:], dAtA9[:j8])
		i = encodeVarintManifest(dAtA, i, uint64(j8))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TopDeletes) > 0 {
		dAtA11 := make([]byte, len(m.TopDeletes)*10)
		var j10 int
		for _, num := range m.TopDeletes {
			for num >= 1<<7 {
				dAtA11[j10] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j10++
			}
			dAtA11[j10] = uint8(num)
			j10++
		}
		i -= j10
		copy(dAtA[i:], dAtA11[:j10])
		i = encodeVarintManifest(dAtA, i, uint64(j10))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TableCreates) > 0 {
		for iNdEx := len(m.TableCreates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TableCreates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintManifest(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Level != 0 {
		i = encodeVarintManifest(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x10
	}
	if m.Cf != 0 {
		i = encodeVarintManifest(dAtA, i, uint64(m.Cf))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ShardFlush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShardFlush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShardFlush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CommitTS != 0 {
		i = encodeVarintManifest(dAtA, i, uint64(m.CommitTS))
		i--
		dAtA[i] = 0x10
	}
	if len(m.L0Creates) > 0 {
		for iNdEx := len(m.L0Creates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.L0Creates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintManifest(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ShardSnapshot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShardSnapshot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShardSnapshot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CommitTS != 0 {
		i = encodeVarintManifest(dAtA, i, uint64(m.CommitTS))
		i--
		dAtA[i] = 0x38
	}
	if len(m.TableCreates) > 0 {
		for iNdEx := len(m.TableCreates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TableCreates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintManifest(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.L0Creates) > 0 {
		for iNdEx := len(m.L0Creates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.L0Creates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintManifest(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.SplitKeys) > 0 {
		for iNdEx := len(m.SplitKeys) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SplitKeys[iNdEx])
			copy(dAtA[i:], m.SplitKeys[iNdEx])
			i = encodeVarintManifest(dAtA, i, uint64(len(m.SplitKeys[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Properties != nil {
		{
			size, err := m.Properties.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintManifest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.End) > 0 {
		i -= len(m.End)
		copy(dAtA[i:], m.End)
		i = encodeVarintManifest(dAtA, i, uint64(len(m.End)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Start) > 0 {
		i -= len(m.Start)
		copy(dAtA[i:], m.Start)
		i = encodeVarintManifest(dAtA, i, uint64(len(m.Start)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ShardSplitFiles) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShardSplitFiles) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShardSplitFiles) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TableDeletes) > 0 {
		dAtA14 := make([]byte, len(m.TableDeletes)*10)
		var j13 int
		for _, num := range m.TableDeletes {
			for num >= 1<<7 {
				dAtA14[j13] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j13++
			}
			dAtA14[j13] = uint8(num)
			j13++
		}
		i -= j13
		copy(dAtA[i:], dAtA14[:j13])
		i = encodeVarintManifest(dAtA, i, uint64(j13))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TableCreates) > 0 {
		for iNdEx := len(m.TableCreates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TableCreates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintManifest(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.L0Creates) > 0 {
		for iNdEx := len(m.L0Creates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.L0Creates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintManifest(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *L0Create) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *L0Create) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *L0Create) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Properties != nil {
		{
			size, err := m.Properties.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintManifest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.End) > 0 {
		i -= len(m.End)
		copy(dAtA[i:], m.End)
		i = encodeVarintManifest(dAtA, i, uint64(len(m.End)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Start) > 0 {
		i -= len(m.Start)
		copy(dAtA[i:], m.Start)
		i = encodeVarintManifest(dAtA, i, uint64(len(m.Start)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintManifest(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TableCreate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableCreate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TableCreate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Biggest) > 0 {
		i -= len(m.Biggest)
		copy(dAtA[i:], m.Biggest)
		i = encodeVarintManifest(dAtA, i, uint64(len(m.Biggest)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Smallest) > 0 {
		i -= len(m.Smallest)
		copy(dAtA[i:], m.Smallest)
		i = encodeVarintManifest(dAtA, i, uint64(len(m.Smallest)))
		i--
		dAtA[i] = 0x22
	}
	if m.CF != 0 {
		i = encodeVarintManifest(dAtA, i, uint64(m.CF))
		i--
		dAtA[i] = 0x18
	}
	if m.Level != 0 {
		i = encodeVarintManifest(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintManifest(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ShardPreSplit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShardPreSplit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShardPreSplit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MemProps != nil {
		{
			size, err := m.MemProps.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintManifest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Keys) > 0 {
		for iNdEx := len(m.Keys) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Keys[iNdEx])
			copy(dAtA[i:], m.Keys[iNdEx])
			i = encodeVarintManifest(dAtA, i, uint64(len(m.Keys[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ShardSplit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShardSplit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShardSplit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MemProps != nil {
		{
			size, err := m.MemProps.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintManifest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Keys) > 0 {
		for iNdEx := len(m.Keys) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Keys[iNdEx])
			copy(dAtA[i:], m.Keys[iNdEx])
			i = encodeVarintManifest(dAtA, i, uint64(len(m.Keys[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.NewShards) > 0 {
		for iNdEx := len(m.NewShards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NewShards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintManifest(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ShardProperties) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShardProperties) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShardProperties) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Values) > 0 {
		for iNdEx := len(m.Values) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Values[iNdEx])
			copy(dAtA[i:], m.Values[iNdEx])
			i = encodeVarintManifest(dAtA, i, uint64(len(m.Values[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Keys) > 0 {
		for iNdEx := len(m.Keys) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Keys[iNdEx])
			copy(dAtA[i:], m.Keys[iNdEx])
			i = encodeVarintManifest(dAtA, i, uint64(len(m.Keys[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ShardID != 0 {
		i = encodeVarintManifest(dAtA, i, uint64(m.ShardID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintManifest(dAtA []byte, offset int, v uint64) int {
	offset -= sovManifest(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ManifestChangeSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Changes) > 0 {
		for _, e := range m.Changes {
			l = e.Size()
			n += 1 + l + sovManifest(uint64(l))
		}
	}
	if m.Head != nil {
		l = m.Head.Size()
		n += 1 + l + sovManifest(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HeadInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovManifest(uint64(m.Version))
	}
	if m.LogID != 0 {
		n += 1 + sovManifest(uint64(m.LogID))
	}
	if m.LogOffset != 0 {
		n += 1 + sovManifest(uint64(m.LogOffset))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ManifestChange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovManifest(uint64(m.ID))
	}
	if m.Op != 0 {
		n += 1 + sovManifest(uint64(m.Op))
	}
	if m.Level != 0 {
		n += 1 + sovManifest(uint64(m.Level))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShardChangeSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ShardID != 0 {
		n += 1 + sovManifest(uint64(m.ShardID))
	}
	if m.ShardVer != 0 {
		n += 1 + sovManifest(uint64(m.ShardVer))
	}
	if m.DataVer != 0 {
		n += 1 + sovManifest(uint64(m.DataVer))
	}
	if m.Compaction != nil {
		l = m.Compaction.Size()
		n += 1 + l + sovManifest(uint64(l))
	}
	if m.Flush != nil {
		l = m.Flush.Size()
		n += 1 + l + sovManifest(uint64(l))
	}
	if m.Snapshot != nil {
		l = m.Snapshot.Size()
		n += 1 + l + sovManifest(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovManifest(uint64(m.State))
	}
	if m.PreSplit != nil {
		l = m.PreSplit.Size()
		n += 1 + l + sovManifest(uint64(l))
	}
	if m.SplitFiles != nil {
		l = m.SplitFiles.Size()
		n += 1 + l + sovManifest(uint64(l))
	}
	if m.Split != nil {
		l = m.Split.Size()
		n += 1 + l + sovManifest(uint64(l))
	}
	if m.ShardDelete {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShardCompaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cf != 0 {
		n += 1 + sovManifest(uint64(m.Cf))
	}
	if m.Level != 0 {
		n += 1 + sovManifest(uint64(m.Level))
	}
	if len(m.TableCreates) > 0 {
		for _, e := range m.TableCreates {
			l = e.Size()
			n += 1 + l + sovManifest(uint64(l))
		}
	}
	if len(m.TopDeletes) > 0 {
		l = 0
		for _, e := range m.TopDeletes {
			l += sovManifest(uint64(e))
		}
		n += 1 + sovManifest(uint64(l)) + l
	}
	if len(m.BottomDeletes) > 0 {
		l = 0
		for _, e := range m.BottomDeletes {
			l += sovManifest(uint64(e))
		}
		n += 1 + sovManifest(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShardFlush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.L0Creates) > 0 {
		for _, e := range m.L0Creates {
			l = e.Size()
			n += 1 + l + sovManifest(uint64(l))
		}
	}
	if m.CommitTS != 0 {
		n += 1 + sovManifest(uint64(m.CommitTS))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShardSnapshot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Start)
	if l > 0 {
		n += 1 + l + sovManifest(uint64(l))
	}
	l = len(m.End)
	if l > 0 {
		n += 1 + l + sovManifest(uint64(l))
	}
	if m.Properties != nil {
		l = m.Properties.Size()
		n += 1 + l + sovManifest(uint64(l))
	}
	if len(m.SplitKeys) > 0 {
		for _, b := range m.SplitKeys {
			l = len(b)
			n += 1 + l + sovManifest(uint64(l))
		}
	}
	if len(m.L0Creates) > 0 {
		for _, e := range m.L0Creates {
			l = e.Size()
			n += 1 + l + sovManifest(uint64(l))
		}
	}
	if len(m.TableCreates) > 0 {
		for _, e := range m.TableCreates {
			l = e.Size()
			n += 1 + l + sovManifest(uint64(l))
		}
	}
	if m.CommitTS != 0 {
		n += 1 + sovManifest(uint64(m.CommitTS))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShardSplitFiles) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.L0Creates) > 0 {
		for _, e := range m.L0Creates {
			l = e.Size()
			n += 1 + l + sovManifest(uint64(l))
		}
	}
	if len(m.TableCreates) > 0 {
		for _, e := range m.TableCreates {
			l = e.Size()
			n += 1 + l + sovManifest(uint64(l))
		}
	}
	if len(m.TableDeletes) > 0 {
		l = 0
		for _, e := range m.TableDeletes {
			l += sovManifest(uint64(e))
		}
		n += 1 + sovManifest(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *L0Create) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovManifest(uint64(m.ID))
	}
	l = len(m.Start)
	if l > 0 {
		n += 1 + l + sovManifest(uint64(l))
	}
	l = len(m.End)
	if l > 0 {
		n += 1 + l + sovManifest(uint64(l))
	}
	if m.Properties != nil {
		l = m.Properties.Size()
		n += 1 + l + sovManifest(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TableCreate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovManifest(uint64(m.ID))
	}
	if m.Level != 0 {
		n += 1 + sovManifest(uint64(m.Level))
	}
	if m.CF != 0 {
		n += 1 + sovManifest(uint64(m.CF))
	}
	l = len(m.Smallest)
	if l > 0 {
		n += 1 + l + sovManifest(uint64(l))
	}
	l = len(m.Biggest)
	if l > 0 {
		n += 1 + l + sovManifest(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShardPreSplit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for _, b := range m.Keys {
			l = len(b)
			n += 1 + l + sovManifest(uint64(l))
		}
	}
	if m.MemProps != nil {
		l = m.MemProps.Size()
		n += 1 + l + sovManifest(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShardSplit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NewShards) > 0 {
		for _, e := range m.NewShards {
			l = e.Size()
			n += 1 + l + sovManifest(uint64(l))
		}
	}
	if len(m.Keys) > 0 {
		for _, b := range m.Keys {
			l = len(b)
			n += 1 + l + sovManifest(uint64(l))
		}
	}
	if m.MemProps != nil {
		l = m.MemProps.Size()
		n += 1 + l + sovManifest(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShardProperties) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ShardID != 0 {
		n += 1 + sovManifest(uint64(m.ShardID))
	}
	if len(m.Keys) > 0 {
		for _, s := range m.Keys {
			l = len(s)
			n += 1 + l + sovManifest(uint64(l))
		}
	}
	if len(m.Values) > 0 {
		for _, b := range m.Values {
			l = len(b)
			n += 1 + l + sovManifest(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovManifest(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozManifest(x uint64) (n int) {
	return sovManifest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ManifestChangeSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManifest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ManifestChangeSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ManifestChangeSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Changes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManifest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManifest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Changes = append(m.Changes, &ManifestChange{})
			if err := m.Changes[len(m.Changes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManifest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManifest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Head == nil {
				m.Head = &HeadInfo{}
			}
			if err := m.Head.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManifest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManifest
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManifest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeadInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManifest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeadInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeadInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogID", wireType)
			}
			m.LogID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogOffset", wireType)
			}
			m.LogOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogOffset |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipManifest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManifest
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManifest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ManifestChange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManifest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ManifestChange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ManifestChange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Op", wireType)
			}
			m.Op = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Op |= ManifestChange_Operation(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipManifest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManifest
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManifest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShardChangeSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManifest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShardChangeSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShardChangeSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardID", wireType)
			}
			m.ShardID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardVer", wireType)
			}
			m.ShardVer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardVer |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataVer", wireType)
			}
			m.DataVer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataVer |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Compaction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManifest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManifest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Compaction == nil {
				m.Compaction = &ShardCompaction{}
			}
			if err := m.Compaction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flush", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManifest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManifest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Flush == nil {
				m.Flush = &ShardFlush{}
			}
			if err := m.Flush.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Snapshot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManifest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManifest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Snapshot == nil {
				m.Snapshot = &ShardSnapshot{}
			}
			if err := m.Snapshot.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= SplitState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreSplit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManifest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManifest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PreSplit == nil {
				m.PreSplit = &ShardPreSplit{}
			}
			if err := m.PreSplit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SplitFiles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManifest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManifest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SplitFiles == nil {
				m.SplitFiles = &ShardSplitFiles{}
			}
			if err := m.SplitFiles.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Split", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManifest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManifest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Split == nil {
				m.Split = &ShardSplit{}
			}
			if err := m.Split.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardDelete", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShardDelete = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipManifest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManifest
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManifest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShardCompaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManifest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShardCompaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShardCompaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cf", wireType)
			}
			m.Cf = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cf |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableCreates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManifest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManifest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TableCreates = append(m.TableCreates, &TableCreate{})
			if err := m.TableCreates[len(m.TableCreates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowManifest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TopDeletes = append(m.TopDeletes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowManifest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthManifest
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthManifest
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.TopDeletes) == 0 {
					m.TopDeletes = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowManifest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TopDeletes = append(m.TopDeletes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TopDeletes", wireType)
			}
		case 5:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowManifest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BottomDeletes = append(m.BottomDeletes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowManifest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthManifest
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthManifest
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.BottomDeletes) == 0 {
					m.BottomDeletes = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowManifest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.BottomDeletes = append(m.BottomDeletes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field BottomDeletes", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipManifest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManifest
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManifest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShardFlush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManifest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShardFlush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShardFlush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L0Creates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManifest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManifest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.L0Creates = append(m.L0Creates, &L0Create{})
			if err := m.L0Creates[len(m.L0Creates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitTS", wireType)
			}
			m.CommitTS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommitTS |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipManifest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManifest
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManifest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShardSnapshot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManifest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShardSnapshot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShardSnapshot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthManifest
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthManifest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Start = append(m.Start[:0], dAtA[iNdEx:postIndex]...)
			if m.Start == nil {
				m.Start = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthManifest
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthManifest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.End = append(m.End[:0], dAtA[iNdEx:postIndex]...)
			if m.End == nil {
				m.End = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Properties", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManifest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManifest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Properties == nil {
				m.Properties = &ShardProperties{}
			}
			if err := m.Properties.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SplitKeys", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthManifest
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthManifest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SplitKeys = append(m.SplitKeys, make([]byte, postIndex-iNdEx))
			copy(m.SplitKeys[len(m.SplitKeys)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L0Creates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManifest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManifest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.L0Creates = append(m.L0Creates, &L0Create{})
			if err := m.L0Creates[len(m.L0Creates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableCreates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManifest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManifest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TableCreates = append(m.TableCreates, &TableCreate{})
			if err := m.TableCreates[len(m.TableCreates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitTS", wireType)
			}
			m.CommitTS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommitTS |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipManifest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManifest
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManifest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShardSplitFiles) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManifest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShardSplitFiles: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShardSplitFiles: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L0Creates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManifest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManifest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.L0Creates = append(m.L0Creates, &L0Create{})
			if err := m.L0Creates[len(m.L0Creates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableCreates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManifest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManifest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TableCreates = append(m.TableCreates, &TableCreate{})
			if err := m.TableCreates[len(m.TableCreates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowManifest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TableDeletes = append(m.TableDeletes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowManifest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthManifest
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthManifest
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.TableDeletes) == 0 {
					m.TableDeletes = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowManifest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TableDeletes = append(m.TableDeletes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TableDeletes", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipManifest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManifest
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManifest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *L0Create) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManifest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: L0Create: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: L0Create: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthManifest
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthManifest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Start = append(m.Start[:0], dAtA[iNdEx:postIndex]...)
			if m.Start == nil {
				m.Start = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthManifest
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthManifest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.End = append(m.End[:0], dAtA[iNdEx:postIndex]...)
			if m.End == nil {
				m.End = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Properties", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManifest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManifest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Properties == nil {
				m.Properties = &ShardProperties{}
			}
			if err := m.Properties.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManifest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManifest
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManifest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableCreate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManifest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableCreate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableCreate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CF", wireType)
			}
			m.CF = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CF |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Smallest", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthManifest
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthManifest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Smallest = append(m.Smallest[:0], dAtA[iNdEx:postIndex]...)
			if m.Smallest == nil {
				m.Smallest = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Biggest", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthManifest
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthManifest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Biggest = append(m.Biggest[:0], dAtA[iNdEx:postIndex]...)
			if m.Biggest == nil {
				m.Biggest = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManifest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManifest
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManifest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShardPreSplit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManifest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShardPreSplit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShardPreSplit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keys", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthManifest
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthManifest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keys = append(m.Keys, make([]byte, postIndex-iNdEx))
			copy(m.Keys[len(m.Keys)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemProps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManifest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManifest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MemProps == nil {
				m.MemProps = &ShardProperties{}
			}
			if err := m.MemProps.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManifest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManifest
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManifest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShardSplit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManifest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShardSplit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShardSplit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewShards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManifest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManifest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewShards = append(m.NewShards, &ShardProperties{})
			if err := m.NewShards[len(m.NewShards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keys", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthManifest
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthManifest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keys = append(m.Keys, make([]byte, postIndex-iNdEx))
			copy(m.Keys[len(m.Keys)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemProps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManifest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManifest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MemProps == nil {
				m.MemProps = &ShardProperties{}
			}
			if err := m.MemProps.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManifest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManifest
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManifest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShardProperties) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManifest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShardProperties: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShardProperties: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardID", wireType)
			}
			m.ShardID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keys", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManifest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManifest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keys = append(m.Keys, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthManifest
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthManifest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, make([]byte, postIndex-iNdEx))
			copy(m.Values[len(m.Values)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManifest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManifest
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManifest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipManifest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowManifest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthManifest
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupManifest
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthManifest
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthManifest        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowManifest          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupManifest = fmt.Errorf("proto: unexpected end of group")
)
